{"version":3,"sources":["components/story-view/story-view.js","components/story/story.js","components/home/home.js","App.js","serviceWorker.js","index.js"],"names":["StoryView","state","storyId","title","comments","url","score","this","getStoryIdFromUrl","setState","props","location","pathname","split","pop","fetchStory","_this2","fetch","concat","then","res","json","console","log","kids","react_default","a","createElement","className","href","React","Component","Story","react_router_dom","to","story","id","by","length","Home","topStoriesIds","storyList","requests","i","push","Promise","all","data","catch","_this3","getItems","map","story_Story","key","showStories","App","react_router","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33ae7924.chunk.js","sourcesContent":["import React from 'react';\nimport './story-view.css';\n\nexport default class StoryView extends React.Component {\n  \n  state = {\n    storyId: 0,\n    title: \"\",\n    comments: [],\n    url:\"\",\n    score: \"\",\n  }\n\n  componentDidMount() {\n    this.getStoryIdFromUrl();\n  }\n\n  getStoryIdFromUrl() {\n    this.setState({storyId: this.props.location.pathname.split(\"/\").pop()}, this.fetchStory);\n    \n  }\n\n  fetchStory() {\n    if (this.state.storyId) {\n      fetch(`https://hacker-news.firebaseio.com/v0/item/${this.state.storyId}.json`)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        this.setState({\n          title: res.title,\n          comments: res.kids,\n          url: res.url,\n          score: res.score,\n        })\n      })\n    }    \n  }\n\n  render(){\n    return (\n      <div className=\"container story-view-wrapper\">\n        <div className=\"title\"><a href={this.state.url}>{this.state.title}</a></div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './story.css';\n\nexport default class Story extends React.Component {\n\n    render(){\n      return (\n        <div className=\"story-wrapper\">\n          <Link to={`/story/${this.props.story.id}`}>\n            <div className=\"points\">\n              {this.props.story.score} P\n            </div>\n            <div className=\"content\">\n              <div className=\"title\">\n                {this.props.story.title}  \n              </div>\n              <div className=\"details\">\n                {this.props.story.by} | {this.props.story.kids ? this.props.story.kids.length : 0} comments\n              </div>\n            </div>\n          </Link>\n          \n        </div>\n      );\n    }\n}\n","import React, { Component } from 'react'\nimport Story from '../story/story';\nimport './home.css';\n\n\nclass Home extends Component {\n  state = {\n    topStoriesIds: [],\n    storyList: [],\n  }\n  \n  getItems() {\n    const requests = [];\n    for (let i = 0; i <= 20; i++) {\n      requests.push(fetch(`https://hacker-news.firebaseio.com/v0/item/${this.state.topStoriesIds[i]}.json`).then(res => res.json()));\n    }\n    Promise.all(requests)\n      .then(data => {\n        this.setState({storyList: data})\n      }).catch(console.log) \n  }\n\n  componentDidMount() {\n    fetch('https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty')\n    .then(res => res.json())\n    .then(data => {\n      this.setState({ topStoriesIds: data});\n      this.getItems();\n    }).catch(console.log)\n  }\n\n  showStories() {\n    return this.state.storyList.map((story, i) => {\n      return <Story story={story} key={i}></Story>\n    });\n  }\n\n    render() {\n    return (\n        <div className=\"home container-fluid\">\n            {this.showStories()}\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport StoryView from './components/story-view/story-view';\nimport Home from './components/home/home';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"app container-fluid\">\n          <Switch>\n              <Route exact path='/' component={Home} />\n              <Route exact path='/home' component={Home} />\n              <Route exact path='/story/:id' component={StoryView} />\n          </Switch>\n        </div>\n      </Router>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}